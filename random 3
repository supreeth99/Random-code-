import React, { useState } from "react";

const SearchBar = () => {
  const [query, setQuery] = useState("");
  const [results, setResults] = useState([]);

  const handleSearch = (e) => {
    const searchTerm = e.target.value.toLowerCase();
    setQuery(searchTerm);

    if (!searchTerm) {
      setResults([]);
      return;
    }

    // Recursive function to search nested config
    const searchConfig = (config, searchTerm) => {
      return config
        .map((item) => {
          // Search in entries
          const matchingEntries = item.entries.filter((entry) =>
            entry.name.toLowerCase().includes(searchTerm)
          );

          // Search in subcategories (if they exist)
          const matchingSubcategories = item.subcategories
            ? searchConfig(item.subcategories, searchTerm)
            : [];

          // If there are matches in entries or subcategories, include this category
          if (matchingEntries.length > 0 || matchingSubcategories.length > 0) {
            return {
              category: item.category,
              entries: matchingEntries,
              subcategories: matchingSubcategories,
            };
          }
          return null;
        })
        .filter(Boolean);
    };

    const filteredResults = searchConfig(config, searchTerm);
    setResults(filteredResults);
  };

  return (
    <div>
      <input
        type="text"
        placeholder="Search settings..."
        value={query}
        onChange={handleSearch}
      />
      <div>
        {results.length > 0 ? (
          results.map((result) => (
            <CategoryDisplay key={result.category} categoryData={result} />
          ))
        ) : (
          query && <p>No results found</p>
        )}
      </div>
    </div>
  );
};

// Component to recursively display categories and entries
const CategoryDisplay = ({ categoryData }) => {
  return (
    <div style={{ marginLeft: "20px" }}>
      <h3>{categoryData.category}</h3>
      <ul>
        {categoryData.entries.map((entry) => (
          <li key={entry.id}>
            {entry.name}: {entry.value}
          </li>
        ))}
      </ul>
      {categoryData.subcategories &&
        categoryData.subcategories.map((sub) => (
          <CategoryDisplay key={sub.category} categoryData={sub} />
        ))}
    </div>
  );
};

export default SearchBar;





const flattenData = (obj, parentKey = '') => {
  let result = {};

  // Loop through each key-value pair in the object
  for (let key in obj) {
    if (obj.hasOwnProperty(key)) {
      const newKey = parentKey ? `${parentKey}.${key}` : key; // Combine parent and current key

      // If the value is an object or array, recursively flatten it
      if (typeof obj[key] === 'object' && obj[key] !== null) {
        // If the value is an array, handle each element in the array
        if (Array.isArray(obj[key])) {
          obj[key].forEach((item, index) => {
            // Recursively flatten the items in the array
            Object.assign(result, flattenData(item, `${newKey}.${index}`));
          });
        } else {
          // Otherwise, recursively flatten the object
          Object.assign(result, flattenData(obj[key], newKey));
        }
      } else {
        // If it's a primitive value, add it directly
        result[newKey] = obj[key];
      }
    }
  }

  return result;
};

const data = {
  0: {
    name: 'John Doe',
    details: {
      email: 'john@example.com',
      age: 28,
      marks: [
        [85, 78, 92, 74, 88],
        [90, 67, 80, 95, 83],
        [88, 91, 76, 82, 89],
      ],
    },
  },
  1: {
    name: 'Jane Smith',
    details: {
      email: 'jane@example.com',
      age: 32,
      marks: [
        [88, 91, 76, 82, 89],
        [94, 73, 85, 87, 90],
        [72, 81, 94, 88, 90],
      ],
    },
  },
};

const flattenedData = Object.entries(data).map(([key, value]) => {
  return flattenData(value, key); // Flatten each entry with its numeric key (0, 1, etc.)
});

console.log(flattenedData);
